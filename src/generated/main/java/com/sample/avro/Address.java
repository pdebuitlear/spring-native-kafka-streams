/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.sample.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Address extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7214326701351916034L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Address\",\"namespace\":\"com.sample.avro\",\"fields\":[{\"name\":\"addressId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"addressLine1\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"addressLine2\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"addressLine3\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"addressPostcode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Address> ENCODER =
      new BinaryMessageEncoder<Address>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Address> DECODER =
      new BinaryMessageDecoder<Address>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Address> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Address> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Address> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Address>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Address to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Address from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Address instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Address fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String addressId;
   private java.lang.String addressLine1;
   private java.lang.String addressLine2;
   private java.lang.String addressLine3;
   private java.lang.String addressPostcode;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Address() {}

  /**
   * All-args constructor.
   * @param addressId The new value for addressId
   * @param addressLine1 The new value for addressLine1
   * @param addressLine2 The new value for addressLine2
   * @param addressLine3 The new value for addressLine3
   * @param addressPostcode The new value for addressPostcode
   */
  public Address(java.lang.String addressId, java.lang.String addressLine1, java.lang.String addressLine2, java.lang.String addressLine3, java.lang.String addressPostcode) {
    this.addressId = addressId;
    this.addressLine1 = addressLine1;
    this.addressLine2 = addressLine2;
    this.addressLine3 = addressLine3;
    this.addressPostcode = addressPostcode;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return addressId;
    case 1: return addressLine1;
    case 2: return addressLine2;
    case 3: return addressLine3;
    case 4: return addressPostcode;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: addressId = value$ != null ? value$.toString() : null; break;
    case 1: addressLine1 = value$ != null ? value$.toString() : null; break;
    case 2: addressLine2 = value$ != null ? value$.toString() : null; break;
    case 3: addressLine3 = value$ != null ? value$.toString() : null; break;
    case 4: addressPostcode = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'addressId' field.
   * @return The value of the 'addressId' field.
   */
  public java.lang.String getAddressId() {
    return addressId;
  }


  /**
   * Sets the value of the 'addressId' field.
   * @param value the value to set.
   */
  public void setAddressId(java.lang.String value) {
    this.addressId = value;
  }

  /**
   * Gets the value of the 'addressLine1' field.
   * @return The value of the 'addressLine1' field.
   */
  public java.lang.String getAddressLine1() {
    return addressLine1;
  }


  /**
   * Sets the value of the 'addressLine1' field.
   * @param value the value to set.
   */
  public void setAddressLine1(java.lang.String value) {
    this.addressLine1 = value;
  }

  /**
   * Gets the value of the 'addressLine2' field.
   * @return The value of the 'addressLine2' field.
   */
  public java.lang.String getAddressLine2() {
    return addressLine2;
  }


  /**
   * Sets the value of the 'addressLine2' field.
   * @param value the value to set.
   */
  public void setAddressLine2(java.lang.String value) {
    this.addressLine2 = value;
  }

  /**
   * Gets the value of the 'addressLine3' field.
   * @return The value of the 'addressLine3' field.
   */
  public java.lang.String getAddressLine3() {
    return addressLine3;
  }


  /**
   * Sets the value of the 'addressLine3' field.
   * @param value the value to set.
   */
  public void setAddressLine3(java.lang.String value) {
    this.addressLine3 = value;
  }

  /**
   * Gets the value of the 'addressPostcode' field.
   * @return The value of the 'addressPostcode' field.
   */
  public java.lang.String getAddressPostcode() {
    return addressPostcode;
  }


  /**
   * Sets the value of the 'addressPostcode' field.
   * @param value the value to set.
   */
  public void setAddressPostcode(java.lang.String value) {
    this.addressPostcode = value;
  }

  /**
   * Creates a new Address RecordBuilder.
   * @return A new Address RecordBuilder
   */
  public static com.sample.avro.Address.Builder newBuilder() {
    return new com.sample.avro.Address.Builder();
  }

  /**
   * Creates a new Address RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Address RecordBuilder
   */
  public static com.sample.avro.Address.Builder newBuilder(com.sample.avro.Address.Builder other) {
    if (other == null) {
      return new com.sample.avro.Address.Builder();
    } else {
      return new com.sample.avro.Address.Builder(other);
    }
  }

  /**
   * Creates a new Address RecordBuilder by copying an existing Address instance.
   * @param other The existing instance to copy.
   * @return A new Address RecordBuilder
   */
  public static com.sample.avro.Address.Builder newBuilder(com.sample.avro.Address other) {
    if (other == null) {
      return new com.sample.avro.Address.Builder();
    } else {
      return new com.sample.avro.Address.Builder(other);
    }
  }

  /**
   * RecordBuilder for Address instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Address>
    implements org.apache.avro.data.RecordBuilder<Address> {

    private java.lang.String addressId;
    private java.lang.String addressLine1;
    private java.lang.String addressLine2;
    private java.lang.String addressLine3;
    private java.lang.String addressPostcode;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.sample.avro.Address.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.addressId)) {
        this.addressId = data().deepCopy(fields()[0].schema(), other.addressId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.addressLine1)) {
        this.addressLine1 = data().deepCopy(fields()[1].schema(), other.addressLine1);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.addressLine2)) {
        this.addressLine2 = data().deepCopy(fields()[2].schema(), other.addressLine2);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.addressLine3)) {
        this.addressLine3 = data().deepCopy(fields()[3].schema(), other.addressLine3);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.addressPostcode)) {
        this.addressPostcode = data().deepCopy(fields()[4].schema(), other.addressPostcode);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing Address instance
     * @param other The existing instance to copy.
     */
    private Builder(com.sample.avro.Address other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.addressId)) {
        this.addressId = data().deepCopy(fields()[0].schema(), other.addressId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.addressLine1)) {
        this.addressLine1 = data().deepCopy(fields()[1].schema(), other.addressLine1);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.addressLine2)) {
        this.addressLine2 = data().deepCopy(fields()[2].schema(), other.addressLine2);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.addressLine3)) {
        this.addressLine3 = data().deepCopy(fields()[3].schema(), other.addressLine3);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.addressPostcode)) {
        this.addressPostcode = data().deepCopy(fields()[4].schema(), other.addressPostcode);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'addressId' field.
      * @return The value.
      */
    public java.lang.String getAddressId() {
      return addressId;
    }


    /**
      * Sets the value of the 'addressId' field.
      * @param value The value of 'addressId'.
      * @return This builder.
      */
    public com.sample.avro.Address.Builder setAddressId(java.lang.String value) {
      validate(fields()[0], value);
      this.addressId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'addressId' field has been set.
      * @return True if the 'addressId' field has been set, false otherwise.
      */
    public boolean hasAddressId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'addressId' field.
      * @return This builder.
      */
    public com.sample.avro.Address.Builder clearAddressId() {
      addressId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'addressLine1' field.
      * @return The value.
      */
    public java.lang.String getAddressLine1() {
      return addressLine1;
    }


    /**
      * Sets the value of the 'addressLine1' field.
      * @param value The value of 'addressLine1'.
      * @return This builder.
      */
    public com.sample.avro.Address.Builder setAddressLine1(java.lang.String value) {
      validate(fields()[1], value);
      this.addressLine1 = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'addressLine1' field has been set.
      * @return True if the 'addressLine1' field has been set, false otherwise.
      */
    public boolean hasAddressLine1() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'addressLine1' field.
      * @return This builder.
      */
    public com.sample.avro.Address.Builder clearAddressLine1() {
      addressLine1 = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'addressLine2' field.
      * @return The value.
      */
    public java.lang.String getAddressLine2() {
      return addressLine2;
    }


    /**
      * Sets the value of the 'addressLine2' field.
      * @param value The value of 'addressLine2'.
      * @return This builder.
      */
    public com.sample.avro.Address.Builder setAddressLine2(java.lang.String value) {
      validate(fields()[2], value);
      this.addressLine2 = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'addressLine2' field has been set.
      * @return True if the 'addressLine2' field has been set, false otherwise.
      */
    public boolean hasAddressLine2() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'addressLine2' field.
      * @return This builder.
      */
    public com.sample.avro.Address.Builder clearAddressLine2() {
      addressLine2 = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'addressLine3' field.
      * @return The value.
      */
    public java.lang.String getAddressLine3() {
      return addressLine3;
    }


    /**
      * Sets the value of the 'addressLine3' field.
      * @param value The value of 'addressLine3'.
      * @return This builder.
      */
    public com.sample.avro.Address.Builder setAddressLine3(java.lang.String value) {
      validate(fields()[3], value);
      this.addressLine3 = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'addressLine3' field has been set.
      * @return True if the 'addressLine3' field has been set, false otherwise.
      */
    public boolean hasAddressLine3() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'addressLine3' field.
      * @return This builder.
      */
    public com.sample.avro.Address.Builder clearAddressLine3() {
      addressLine3 = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'addressPostcode' field.
      * @return The value.
      */
    public java.lang.String getAddressPostcode() {
      return addressPostcode;
    }


    /**
      * Sets the value of the 'addressPostcode' field.
      * @param value The value of 'addressPostcode'.
      * @return This builder.
      */
    public com.sample.avro.Address.Builder setAddressPostcode(java.lang.String value) {
      validate(fields()[4], value);
      this.addressPostcode = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'addressPostcode' field has been set.
      * @return True if the 'addressPostcode' field has been set, false otherwise.
      */
    public boolean hasAddressPostcode() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'addressPostcode' field.
      * @return This builder.
      */
    public com.sample.avro.Address.Builder clearAddressPostcode() {
      addressPostcode = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Address build() {
      try {
        Address record = new Address();
        record.addressId = fieldSetFlags()[0] ? this.addressId : (java.lang.String) defaultValue(fields()[0]);
        record.addressLine1 = fieldSetFlags()[1] ? this.addressLine1 : (java.lang.String) defaultValue(fields()[1]);
        record.addressLine2 = fieldSetFlags()[2] ? this.addressLine2 : (java.lang.String) defaultValue(fields()[2]);
        record.addressLine3 = fieldSetFlags()[3] ? this.addressLine3 : (java.lang.String) defaultValue(fields()[3]);
        record.addressPostcode = fieldSetFlags()[4] ? this.addressPostcode : (java.lang.String) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Address>
    WRITER$ = (org.apache.avro.io.DatumWriter<Address>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Address>
    READER$ = (org.apache.avro.io.DatumReader<Address>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.addressId);

    if (this.addressLine1 == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.addressLine1);
    }

    if (this.addressLine2 == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.addressLine2);
    }

    if (this.addressLine3 == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.addressLine3);
    }

    if (this.addressPostcode == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.addressPostcode);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.addressId = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.addressLine1 = null;
      } else {
        this.addressLine1 = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.addressLine2 = null;
      } else {
        this.addressLine2 = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.addressLine3 = null;
      } else {
        this.addressLine3 = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.addressPostcode = null;
      } else {
        this.addressPostcode = in.readString();
      }

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.addressId = in.readString();
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.addressLine1 = null;
          } else {
            this.addressLine1 = in.readString();
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.addressLine2 = null;
          } else {
            this.addressLine2 = in.readString();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.addressLine3 = null;
          } else {
            this.addressLine3 = in.readString();
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.addressPostcode = null;
          } else {
            this.addressPostcode = in.readString();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










